The ``1-my_list`` module
=======================

How to Use 1-my_list.py
-----------------------

This module defines a class ``MyList`` that inherits from ``list``.

Instantiation
=============

``MyList`` can be instantiated with no arguments, which will return
an empty list:

    >>> MyList = __import__('1-my_list').MyList
    >>> my_list = MyList()
    >>> type(my_list)
    <class '1-my_list.MyList'>
    >>> print(my_list)
    []

Checking with 1 arg:
    >>> my_list = MyList([1, 2, 3])
    >>> print(my_list)
    [1, 2, 3]

Checking with None:
    >>> my_list = MyList(None)
    Traceback (most recent call last):
    TypeError: 'NoneType' object is not iterable


Checking with more than 1 arg:
    >>> my_list = MyList([1, 2], [3, 4])
    Traceback (most recent call last):
    TypeError: list() takes at most 1 argument (2 given)


Usage
=====

``MyList`` is an inherited ``list`` class with the same methods.
For instance, elements can be added to a ``MyList`` with the ``append()`` method.
    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> print(my_list)
    [1, 2, 3]

Replacing the list:
    >>> my_list[0] = 5
    >>> print(my_list)
    [5, 2, 3]

Remove an element of the list:
    >>> my_list.remove(5)
    >>> print(my_list)
    [2, 3]


=======================

``print_sorted`` Method
-----------------------

``MyList`` implements a single method - a public instance method
``print_sorted(self)``.

    >>> my_list = MyList()
    >>> print(my_list.print_sorted)
    <bound method MyList.print_sorted of []>

Checking with 1 arg:
    >>> my_list.print_sorted(1)
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 2 were given


The print_sorted function prints in ascending order:
    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> print(my_list)
    [1, 4, 2, 3, 5]
    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]

And the original list isn't altered:
    >>> print(my_list)
    [1, 4, 2, 3, 5]


The strings are sorted alphabetically:
    >>> my_list = MyList()
    >>> my_list.append("Brennan")
    >>> my_list.append("Poppy")
    >>> my_list.append("School")
    >>> my_list.append("Holberton")
    >>> my_list.append("Betty")
    >>> print(my_list)
    ['Brennan', 'Poppy', 'School', 'Holberton', 'Betty']
    >>> my_list.print_sorted()
    ['Betty', 'Brennan', 'Holberton', 'Poppy', 'School']


Print an empty list if is empty:
    >>> my_list = MyList()
    >>> my_list.print_sorted()
    []


Checking with different types of a list:
    >>> my_list = MyList([1, "Betty", "Holberton", 5])
    >>> my_list.print_sorted()
    Traceback (most recent call last):
    TypeError: unorderable types: str() < int()
